-- Drop existing objects if they exist to make the script idempotent
DROP VIEW IF EXISTS public.dj_rankings;
DROP TABLE IF EXISTS public.donations;

-- Create the donations table
CREATE TABLE public.donations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    dj_id UUID NOT NULL REFERENCES public.profiles(id),
    donador_id UUID NOT NULL REFERENCES public.profiles(id),
    monto NUMERIC(10, 2) NOT NULL CHECK (monto > 0),
    stripe_payment_id TEXT UNIQUE NOT NULL
);

-- Add comments to the columns
COMMENT ON COLUMN public.donations.dj_id IS 'The DJ who received the donation.';
COMMENT ON COLUMN public.donations.donador_id IS 'The user who made the donation.';
COMMENT ON COLUMN public.donations.monto IS 'The amount of the donation.';
COMMENT ON COLUMN public.donations.stripe_payment_id IS 'The unique ID from the Stripe payment transaction.';

-- Enable Row Level Security
ALTER TABLE public.donations ENABLE ROW LEVEL SECURITY;

-- Create policies for the donations table
-- Policy: Users can see their own donations.
CREATE POLICY "Allow users to see their own donations"
ON public.donations FOR SELECT
USING (auth.uid() = (SELECT user_id FROM public.profiles WHERE id = donador_id));

-- Policy: DJs can see donations made to them.
CREATE POLICY "Allow DJs to see donations made to them"
ON public.donations FOR SELECT
USING (auth.uid() = (SELECT user_id FROM public.profiles WHERE id = dj_id));

-- Policy: Allow authenticated users to insert donations. (We will lock this down further with Stripe webhooks later)
CREATE POLICY "Allow authenticated users to insert donations"
ON public.donations FOR INSERT
WITH CHECK (auth.role() = 'authenticated');


-- Create the ranking view
CREATE OR REPLACE VIEW public.dj_rankings AS
WITH donation_totals AS (
    SELECT
        d.dj_id,
        SUM(d.monto) as total_donations
    FROM
        public.donations d
    GROUP BY
        d.dj_id
)
SELECT
    p.id as dj_id,
    p.full_name as dj_name,
    COALESCE(dt.total_donations, 0) as total_donations,
    CASE
        WHEN COALESCE(dt.total_donations, 0) >= 1200 THEN '12 meses gratis'
        WHEN COALESCE(dt.total_donations, 0) >= 600 THEN '6 meses gratis'
        WHEN COALESCE(dt.total_donations, 0) >= 300 THEN '3 meses gratis'
        WHEN COALESCE(dt.total_donations, 0) >= 100 THEN '1 mes gratis'
        ELSE 'Sin premio'
    END as premio
FROM
    public.profiles p
LEFT JOIN
    donation_totals dt ON p.id = dt.dj_id
WHERE
    p.role = 'dj'
ORDER BY
    total_donations DESC;